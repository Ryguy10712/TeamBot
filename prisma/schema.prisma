generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Team {
  id                  Int               @id @unique @default(autoincrement())
  name                String            @unique
  rank                Int?
  confidential        Boolean
  players             TeamPlayer[]
  availability        TeamAvailability?
  schedulingChannel   String?           @unique
  scheduleRequestsOut ScheduleRequest[] @relation("requester")
  scheduleRequestsIn  ScheduleRequest[] @relation("receiver")
  hidesAvailability   Boolean           @default(false)
  teamRoleId          String?

  @@index([name])
}

model Player {
  discordId String      @id @unique
  oculusId  String      @unique
  team      TeamPlayer?

  @@index([discordId, oculusId])
}

model TeamPlayer {
  playerId  String  @id @unique
  player    Player? @relation(fields: [playerId], references: [discordId], onDelete: Cascade, onUpdate: Cascade)
  teamId    Int
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isCaptain Boolean @default(false)
  isCoCap   Boolean @default(false)
  tuesday   Json?
  wednesday Json?
  thursday  Json?
  friday    Json?
  saturday  Json?
  sunday    Json?
  monday    Json?

  @@index([teamId])
}

model ScheduleRequest {
  id             Int     @id @default(autoincrement())
  type           Int     @default(0)
  requesterId    Int
  receiverId     Int     @map("opponentId")
  requesterTeam  Team    @relation(name: "requester", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverTeam   Team    @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accepted       Boolean @default(false)
  captainMsgId   String  @unique
  coCaptainMsgId String? @unique

  @@index([requesterId])
  @@index([receiverId])
}

model TeamAvailability {
  teamId    Int    @id @unique
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tuesday   String @unique
  wednesday String @unique
  thursday  String @unique
  friday    String @unique
  saturday  String @unique
  sunday    String @unique
  monday    String @unique
}

model PersistantButtons {
  id String @id @unique
}
